<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>MensaarLecker -- A statistics for UdS Mensa using Selenium</title>
      <link href="/2024/10/07/mensaar/"/>
      <url>/2024/10/07/mensaar/</url>
      
        <content type="html"><![CDATA[<blockquote><p>I Dedicate this project to my favourite <a href="https://www.stw-saarland.de/de/Verpflegung/Mensa-Saarbrucken/Unser-Angebot">Mensa</a> in Germany. I love you deeply with all my heart. Thank you for all the budget menu and frozen food recommendations. The food price is so low, just like my body weight.</p></blockquote><p>This post is to share the walkthrough of this project‚Äôs development. For project details, please visit the repository <a href="https://github.com/Alexcnli/MensaarLecker">MensaarLecker</a></p><h1 id="üçΩ-ü•®-MensaarLecker-‚Äì-A-beloved-tool-to-find-out-Mensa-Ladies‚Äô-favourite-menu-ü•®-üçΩ"><a href="#üçΩ-ü•®-MensaarLecker-‚Äì-A-beloved-tool-to-find-out-Mensa-Ladies‚Äô-favourite-menu-ü•®-üçΩ" class="headerlink" title="üçΩ ü•® MensaarLecker ‚Äì A beloved tool to find out Mensa Ladies‚Äô favourite menu ü•® üçΩ"></a>üçΩ ü•® MensaarLecker ‚Äì A beloved tool to find out Mensa Ladies‚Äô favourite menu ü•® üçΩ</h1><h2 id="Motivation"><a href="#Motivation" class="headerlink" title="Motivation"></a>Motivation</h2><p>Me and my friends <del>hate</del><strong>love</strong> the UdS Mensa so much! The infinite frozen food and french fries menus give us so much energy and motivation for the 5-hour afternoon coding marathon. However, no one actually knows how many potatoes they have exterminated throughout the week. We have a genius webpage created by some <a href="https://gibtesheuteschnitzel.de/">Schnitzel lover</a>. Personally, I like its minimalistic layout and determination on Schnitzel searching. </p><blockquote><p>However, we want more.</p></blockquote><p>It‚Äôs not just Schnitzel; we want to know everything about their menu. We want to know what‚Äôs inside the mensa ladies‚Äô brains when they design next week‚Äôs menu.</p><blockquote><p>The desire never ends. We need more data, more details, more, More, <strong>MORE!</strong></p></blockquote><h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>MensaarLecker is a statistic that collects all the menus‚Äô occurrences and provides daily menu information. It contains:</p><ul><li>A web scraper that collects the <a href="https://mensaar.de/#/menu/sb">daily menu</a> of the Mensa in Saarland University. </li><li>A statistic that calculates each item‚Äôs (main dish &amp; side dish) occurrence and percentage.</li></ul><h2 id="Developing-Process"><a href="#Developing-Process" class="headerlink" title="Developing Process"></a>Developing Process</h2><h3 id="Beautiful-Soup"><a href="#Beautiful-Soup" class="headerlink" title="Beautiful Soup"></a><a href="https://www.crummy.com/software/BeautifulSoup/bs4/doc/">Beautiful Soup</a></h3><p>I started my journey with Beautiful Soup, one of the most popular Python web scraper packages. However, as a Uni that is well-known for its computer science program, all the menus are rendered using JavaScript. And beautiful can only scrape HTML and XML tags. So the scraper can only see an empty skeleton page:</p><p><img src="/images/mensaar_empty.png"></p><h3 id="Selenium"><a href="#Selenium" class="headerlink" title="Selenium"></a><a href="https://selenium-python.readthedocs.io/">Selenium</a></h3><p>Basically, Selenium is a <a href="https://www.selenium.dev/documentation/webdriver/">Webdriver</a> that opens a browser naturally, like a human user. Then from there we can scrape the rendered information. Things get simpler once we can see the website as we see it on the browser. We just need to find the tag that contains the information we need and save it for storage.</p><h3 id="Scraping"><a href="#Scraping" class="headerlink" title="Scraping"></a>Scraping</h3><table><thead><tr><th align="left">data we need</th><th align="left">tag</th></tr></thead><tbody><tr><td align="left">menus</td><td align="left"><code>&lt;div class=&quot;counter&quot;&gt;</code></td></tr><tr><td align="left">date</td><td align="left"><code>&lt;div class=&quot;cursor-pointer active list-group-item&quot;&gt;</code></td></tr><tr><td align="left">main dish</td><td align="left"><code>&lt;span class=&quot;meal-title&quot;&gt;</code></td></tr><tr><td align="left">side dish</td><td align="left"><code>&lt;div class=&quot;component&quot;&gt;</code></td></tr></tbody></table><p>The first part of the task is to get the daily menu. We also get the date on the website to make the following work easier.</p><p>By the <code>find_element</code> and <code>find_elements</code> functions in Selenium, we can create a simple scraper like this:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.keys <span class="keyword">import</span> Keys</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.by <span class="keyword">import</span> By</span><br><span class="line"></span><br><span class="line">driver = webdriver.Firefox()</span><br><span class="line">driver.get(<span class="string">&quot;https://mensaar.de/#/menu/sb&quot;</span>)</span><br><span class="line">counters = driver.find_elements(By.CLASS_NAME, <span class="string">&quot;counter&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> counter <span class="keyword">in</span> counters:</span><br><span class="line">    meal_title = meal.find_element(By.CLASS_NAME, <span class="string">&quot;meal-title&quot;</span>).text.strip()</span><br></pre></td></tr></table></figure><p>However, on the webpage there is also a counter called <code>Wahlessen.</code> Which refers to a more pricy and unpredictable menu, and we want to exclude its data:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">counter_title = counter.find_element(By.CLASS_NAME, <span class="string">&quot;counter-title&quot;</span>).text.strip()</span><br><span class="line"></span><br><span class="line"><span class="comment"># Filter for specified counter titles</span></span><br><span class="line"><span class="keyword">if</span> counter_title <span class="keyword">in</span> [<span class="string">&quot;Men√º 1&quot;</span>, <span class="string">&quot;Men√º 2&quot;</span>, <span class="string">&quot;Mensacaf√©&quot;</span>]:</span><br><span class="line">    meal_title = meal.find_element(By.CLASS_NAME, <span class="string">&quot;meal-title&quot;</span>).text.strip()</span><br></pre></td></tr></table></figure><h3 id="Storage"><a href="#Storage" class="headerlink" title="Storage"></a>Storage</h3><p>It is kinda pointless to make a full database for these small piece of data <em>(I may take my word back in the future)</em>, so we just store the collected data in Json files.<br>Therefore, everyday we will have a separate Json file. We create a separate Json file for statistics, it is calculated simply by adding current date‚Äôs data into the file, so it will accumlate each data entry.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(output_file, <span class="string">&quot;w&quot;</span>, encoding=<span class="string">&quot;utf-8&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    json.dump(result, f, ensure_ascii=<span class="literal">False</span>, indent=<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;Results saved to <span class="subst">&#123;output_file&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Save the updated occurrence counts to the JSON file</span></span><br><span class="line">count_result = &#123;</span><br><span class="line">    <span class="string">&quot;meal_counts&quot;</span>: <span class="built_in">dict</span>(meal_count),</span><br><span class="line">    <span class="string">&quot;component_counts&quot;</span>: <span class="built_in">dict</span>(component_count)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(count_file, <span class="string">&quot;w&quot;</span>, encoding=<span class="string">&quot;utf-8&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    json.dump(count_result, f, ensure_ascii=<span class="literal">False</span>, indent=<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;Counts saved to <span class="subst">&#123;count_file&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;meal_counts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;KlimaTeller: Broccoli und Cheese Nuggets mit Chili-Kr√§uterdip&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;H√§hnchenschnitzel ‚ÄûWiener Art‚Äú mit Paprikarahmso√üe&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;Flammkuchen mit Tomaten und Rucola&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;K√∂ttbullar und Rahmso√üe mit Champignons&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;KlimaTeller: T√ºrkische Pizza Lahmacun&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;KlimaTeller: Hausgemachte vegetarische Kartoffelsuppe&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;Pasta mit Argentinischer Hackfleischso√üe&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;component_counts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;Pommes Frites&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;Karottensalat&quot;</span><span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;Reis (aus biologischem Anbau)&quot;</span><span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;Wei√üe Salatso√üe Dressing&quot;</span><span class="punctuation">:</span> <span class="number">6</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;Obst (Apfel aus biologischem Anbau)&quot;</span><span class="punctuation">:</span> <span class="number">6</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;Br√∂tchen&quot;</span><span class="punctuation">:</span> <span class="number">4</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;Wiener W√ºrstchen&quot;</span><span class="punctuation">:</span> <span class="number">1</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="Automation"><a href="#Automation" class="headerlink" title="Automation"></a>Automation</h3><blockquote><p>The part that gives me headache‚Ä¶</p></blockquote><p>I tried to use <a href="https://docs.github.com/en/actions/writing-workflows">GitHub Workflow</a> to run the Python script daily, but it didn‚Äôt work out‚Ä¶ So for my next step, I may create automation locally and connect the folder to the repository through GitHub Desktop.</p><p>Another solution maybe transfer the Json storage into standard database like <a href="https://www.mongodb.com/">MongoDB</a>.</p>]]></content>
      
      
      <categories>
          
          <category> Projects </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Scraper </tag>
            
            <tag> Selenium </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>3-hexo Shortcut</title>
      <link href="/2024/10/01/3_hexo_Shortcut/"/>
      <url>/2024/10/01/3_hexo_Shortcut/</url>
      
        <content type="html"><![CDATA[<p>Below is the list of shortcuts by for readers from the 3-hexo theme. </p><h2 id="Details"><a href="#Details" class="headerlink" title="Details"></a>Details</h2><h3 id="Global-Shortcut"><a href="#Global-Shortcut" class="headerlink" title="Global Shortcut"></a>Global Shortcut</h3><table><thead><tr><th align="left">Key</th><th align="left">Description</th></tr></thead><tbody><tr><td align="left">s</td><td align="left">show &#x2F; hide sidebar</td></tr><tr><td align="left">w</td><td align="left">show &#x2F; hide post‚Äôs table of content</td></tr><tr><td align="left">i</td><td align="left">focus on search boxes</td></tr><tr><td align="left">j</td><td align="left">scroll down</td></tr><tr><td align="left">k</td><td align="left">scroll up</td></tr><tr><td align="left">g</td><td align="left">page up</td></tr><tr><td align="left">shift+g</td><td align="left">page down</td></tr></tbody></table><h3 id="Search-Box"><a href="#Search-Box" class="headerlink" title="Search Box"></a>Search Box</h3><table><thead><tr><th align="left">Key</th><th align="left">Description</th></tr></thead><tbody><tr><td align="left">esc</td><td align="left">1. If there is input in the search box, it will be cleared </br> 2. if not, remove its focus</td></tr><tr><td align="left">down</td><td align="left">scroll downward</td></tr><tr><td align="left">up</td><td align="left">scroll upward</td></tr><tr><td align="left">enter</td><td align="left">redirect to selected post (default: first search result)</td></tr></tbody></table><p>More info: <a href="https://yelog.org/2017/03/24/3-hexo-shortcuts/">3-hexo shortcut by yelog</a></p>]]></content>
      
      
      <categories>
          
          <category> Site Note </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> 3-hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
