<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Parameterized Verification 1.2 -- Synchronization Primitives of Processes</title>
      <link href="/pv1-2/"/>
      <url>/pv1-2/</url>
      
        <content type="html"><![CDATA[<blockquote><p>This is a learning note of a course in <a href="https://cispa.de/de">CISPA</a>, UdS. Taught by Swen Jacobs</p></blockquote><h2 id="Processes"><a href="#Processes" class="headerlink" title="Processes"></a>Processes</h2><p>A Process is an LTS $P &#x3D; (Q, Q_0, \Sigma, \delta, \lambda)$ with $\Sigma &#x3D; \Sigma_{int} \cup \lbrace out_a , in_a \mid a \in \Sigma_{sync} \rbrace $, where </p><ul><li>$\Sigma_{int}$ is a set of <code>internal</code> actions,</li><li>$\Sigma_{sync}$ a set of <code>synchronizing</code> actions,</li><li>$out_a$ is an <code>send</code> action (or <code>initiate</code> action),</li><li>$in_a$ is an <code>receive</code> action.</li></ul><h3 id="Composition-by-Synchronization"><a href="#Composition-by-Synchronization" class="headerlink" title="Composition by Synchronization"></a>Composition by Synchronization</h3><p>The composition $P^n$ of $n$ (uniform) processes wrt. $card$ is the LTS $(S, S_0, \Sigma_{int} \cup \Sigma_{sync}, \Delta, \Lambda)$ with:</p><ul><li><p>$S &#x3D; Q \times Q$ </p></li><li><p>$S_0 &#x3D; Q_0 \times Q_0$</p></li><li><p>$\Delta \subseteq S \times (\Delta_{int} \cup \Delta_{sync} \times S)$ is the set of all transitions that satisfy one of the following:</p><p><strong>Internal Transition</strong>: </p><ul><li>For some $i \in\lbrace 1, ‚Ä¶ , n \rbrace$ , $(s, a, s‚Äô) \in S \times\Sigma_{int}\times S$ is an element such that:<br> $(s(i), a, s‚Äô(i)) \in\delta$ , and $s(j) &#x3D; s‚Äô(j)$ for $i \ne j \in\lbrace 1, ‚Ä¶, n \rbrace$</li></ul><blockquote><p>Process $s(i)$ take the action, other processes $s(j)$ remain their current states.</p></blockquote><p><strong>Synchronous Transition</strong></p><ul><li><p>For some $i \in \lbrace 1, ‚Ä¶ , n \rbrace$ and some $I \subseteq \lbrace 1, ‚Ä¶, n \rbrace \setminus \lbrace i \rbrace$ with $|I| \in card$ ,<br>$(s, a, s‚Äô) \in S \times \Sigma_{int} \times S$ is an element such that: </p><ul><li>$s(i) \buildrel out_a \over\longrightarrow s‚Äô(i)$ is (a local transition) in $P$<blockquote><p>One process $s(i)$ take the <code>send</code> action.</p></blockquote></li><li>for every $j \in I, s(j) \buildrel in_a \over\longrightarrow s‚Äô(j)$ is (a local transition) in $P$<blockquote><p>$I$ is the set of processes that can take the <code>receive</code> action. (size of $I$ must not be larger then $card$)</p></blockquote></li><li>for every $j \in\lbrace 1, ‚Ä¶, n \rbrace \setminus (I \cup\lbrace i \rbrace), s‚Äô(j) &#x3D; s(j)$<blockquote><p>Other processes $s(j)$ that cannot take <code>receive</code> actions remain their current states.</p></blockquote></li><li>$I$ is <strong>maximal</strong>.<blockquote><p>There does not exist a larger set $I‚Äô \supset I$ with $|I‚Äô| \in card$ that for all $j \in I‚Äô$ ,<br>there is a local transition from $s(j)$ that can take the <code>receive</code> action.</p></blockquote></li></ul></li></ul></li><li><p>$\Lambda(s) &#x3D; \lbrace p_{i} \mid p \in \text{AP and p} \in\lambda(s(i)), i \in \lbrace 1, ‚Ä¶, n\rbrace \rbrace$</p></li></ul><blockquote><p>In this course, send action &#x3D; $out_a$ &#x3D; $a!!$ ; receive action &#x3D; $in_a$ &#x3D; $a??$.</p></blockquote><p>Example of Composition by <code>Broadcast</code> synchronization. $(card &#x3D; \lbrace 1 \rbrace)$</p><p><img src="/images/pv1_2_composition.png"></p><h2 id="Synchronization-Primitives"><a href="#Synchronization-Primitives" class="headerlink" title="Synchronization Primitives"></a>Synchronization Primitives</h2><p>In this course, there are 4 types of synchronization:<br><code>Pairwise Rendezvous</code>, <code>Broadcast</code>, <code>Asynchronous Rendezvous</code>, and <code>Lossy Broadcast</code>.</p><h3 id="Pairwise-Rendezvous"><a href="#Pairwise-Rendezvous" class="headerlink" title="Pairwise Rendezvous"></a>Pairwise Rendezvous</h3><blockquote><p><strong>Exactly ONE</strong> process take $out_a$ action, <strong>ONE</strong> process take $in_a$ action. $(card &#x3D; \lbrace 1 \rbrace)$</p></blockquote><p><img src="/images/pv1_2_pairwise.png"></p><h3 id="Broadcast"><a href="#Broadcast" class="headerlink" title="Broadcast"></a>Broadcast</h3><blockquote><p><strong>ONE</strong> process take $out_a$ action, <strong>ALL</strong> process take $in_a$ action if they are able to $(card &#x3D; \mathbb{N}_0)$.</p></blockquote><p><img src="/images/pv1_2_broadcast.png"></p><h3 id="Asynchronous-Rendezvous"><a href="#Asynchronous-Rendezvous" class="headerlink" title="Asynchronous Rendezvous"></a>Asynchronous Rendezvous</h3><blockquote><p><strong>ONE</strong> process take $out_a$ action, <strong>ZERO &#x2F; ONE</strong> process take $in_a$ action $(card &#x3D; {0, 1})$.</p></blockquote><p><img src="/images/pv1_2_async.png"></p><h3 id="Lossy-Broadcast"><a href="#Lossy-Broadcast" class="headerlink" title="Lossy Broadcast"></a>Lossy Broadcast</h3><blockquote><p><strong>ONE</strong> process take $out_a$ action, <strong>ONE</strong> process take $in_a$ action $(card &#x3D; \mathbb{N}_0, I\text{ not necessarily maximal})$.</p></blockquote><p><img src="/images/pv1_2_lossy.png"></p>]]></content>
      
      
      <categories>
          
          <category> Notes </category>
          
          <category> UdS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PV </tag>
            
            <tag> LTS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Parameterized Verification 1.1 -- Labeled Transition Systems</title>
      <link href="/pv1_1/"/>
      <url>/pv1_1/</url>
      
        <content type="html"><![CDATA[<blockquote><p>This is a learning note of a course in <a href="https://cispa.de/de">CISPA</a>, UdS. Taught by Swen Jacobs</p></blockquote><h2 id="Labeled-Transition-Systems-LTS"><a href="#Labeled-Transition-Systems-LTS" class="headerlink" title="Labeled Transition Systems (LTS)"></a>Labeled Transition Systems (LTS)</h2><p>LTS is a concept in theoretical computer science used in the study of computation. It is used to describe the potential behavior of discrete systems, e.g. <a href="https://en.wikipedia.org/wiki/Model_checking">Model Checking</a>. </p><p>It consists of states and transitions between states, which may be labeled with labels chosen from a set; the same label may appear on more than one transition. Mathematically, it can be described as <a href="https://en.wikipedia.org/wiki/Directed_graph">directed graph</a>. </p><h3 id="Labels"><a href="#Labels" class="headerlink" title="Labels"></a>Labels</h3><p>Labels can be used to describe the behaviour or distinguish between states.<br>If the set of label is a <a href="https://en.wikipedia.org/wiki/Singleton_(mathematics)">singleton</a> (only contains one label), then it can be omitted in the system.</p><h3 id="LTS-v-s-Finite-state-Automata"><a href="#LTS-v-s-Finite-state-Automata" class="headerlink" title="LTS v.s. Finite-state Automata"></a>LTS v.s. Finite-state Automata</h3><p>In Transition systems:</p><ul><li>The set of states is not necessarily finite, or even countable.</li><li>The set of transitions is not necessarily finite, or even countable.</li><li>No ‚Äústart‚Äù state or ‚Äúfinal‚Äù states are given.</li></ul><h2 id="Formal-definition"><a href="#Formal-definition" class="headerlink" title="Formal definition"></a>Formal definition</h2><p>Let ùê¥ùëÉ be a set of atomic propositions (statement or assertion that must be true or false),<br>i.e., observable properties of the system.</p><p>A labeled transition system (LTS) over $AP$ is a tuple $Q, Q_0, \Sigma, \delta, \lambda$, where</p><ul><li>$Q$ is a set of states</li><li>$Q_0 \subseteq Q$ is the set of initial states</li><li>$\Sigma$ is the set of transition labels (or actions)</li><li>$\delta \subseteq Q \times \Sigma \times Q$ is the transition relation (also write as $ q\buildrel a \over\rightarrow q‚Äô \in \delta$)</li><li>$\lambda : Q \rightarrow 2^{AP}$ is the state labeling.</li></ul><blockquote><p>In this course, we assume <strong>finite LTS</strong>, which means $AP$ and $Q$ are finite, unless explicitly stated.</p></blockquote><p><img src="/images/pv1_1_LTS.png"></p><h2 id="Run-of-an-LTS"><a href="#Run-of-an-LTS" class="headerlink" title="Run of an LTS"></a>Run of an LTS</h2><p>Consider an LTS $M &#x3D; (Q, Q_0, \Sigma, \delta, \lambda)$.</p><h3 id="Path"><a href="#Path" class="headerlink" title="Path"></a>Path</h3><p>A path of $M$ an is a finite sequence $q_0a_0q_1a_1‚Ä¶q_n \in (Q\Sigma)\ast Q$, such that $ q_i \buildrel a_i \over\rightarrow q_{i+1}$ for all $i &lt; n$<br>or an infinite sequence $q_0a_0q_1a_1‚Ä¶q_n \in (Q\Sigma)^\omega$, such that $ q_i \buildrel a_i \over\rightarrow q_{i+1}$ for all $i \in \mathbb{N}$.</p><h3 id="Run"><a href="#Run" class="headerlink" title="Run"></a>Run</h3><p>A run of $M$ is a <strong>path</strong> of $M$ with $q_0 \in Q_0$, and that is maximal, i.e., it cannot be extended.</p><p>A run is <strong>deadlocked</strong> if it is finite.</p><h3 id="State-labeled-paths"><a href="#State-labeled-paths" class="headerlink" title="State-labeled paths"></a>State-labeled paths</h3><p>$q_0q_1‚Ä¶$, the projection of a path onto states $Q$,</p><h3 id="Action-labeled-paths"><a href="#Action-labeled-paths" class="headerlink" title="Action-labeled paths"></a>Action-labeled paths</h3><p>$a_0a_1‚Ä¶$, the projection of a path onto actions $\Sigma$,</p><h3 id="Traces"><a href="#Traces" class="headerlink" title="Traces"></a>Traces</h3><p>$\lambda (q_0)\lambda q_1‚Ä¶$, the sequence of labels of a <strong>state-labeled path</strong>.</p><p>Further Reading: <a href="https://en.wikipedia.org/wiki/Transition_system">Transition System</a>, <a href="https://en.wikipedia.org/wiki/Model_checking">Model Checking</a>.</p>]]></content>
      
      
      <categories>
          
          <category> Notes </category>
          
          <category> UdS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PV </tag>
            
            <tag> LTS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MensaarLecker -- A statistics for UdS Mensa using Selenium</title>
      <link href="/mensaar/"/>
      <url>/mensaar/</url>
      
        <content type="html"><![CDATA[<blockquote><p>I Dedicate this project to my favourite <a href="https://www.stw-saarland.de/de/Verpflegung/Mensa-Saarbrucken/Unser-Angebot">Mensa</a> in Germany. I love you deeply with all my heart. Thank you for all the budget menu and frozen food recommendations. The food price is so low, just like my body weight.</p></blockquote><p>This post is to share the walkthrough of this project‚Äôs development. For project details, please visit the repository <a href="https://github.com/Alexcnli/MensaarLecker">MensaarLecker</a></p><h1 id="üçΩ-ü•®-MensaarLecker-‚Äì-A-beloved-tool-to-find-out-Mensa-Ladies‚Äô-favourite-menu-ü•®-üçΩ"><a href="#üçΩ-ü•®-MensaarLecker-‚Äì-A-beloved-tool-to-find-out-Mensa-Ladies‚Äô-favourite-menu-ü•®-üçΩ" class="headerlink" title="üçΩ ü•® MensaarLecker ‚Äì A beloved tool to find out Mensa Ladies‚Äô favourite menu ü•® üçΩ"></a>üçΩ ü•® MensaarLecker ‚Äì A beloved tool to find out Mensa Ladies‚Äô favourite menu ü•® üçΩ</h1><h2 id="Motivation"><a href="#Motivation" class="headerlink" title="Motivation"></a>Motivation</h2><p>Me and my friends <del>hate</del><strong>love</strong> the UdS Mensa so much! The infinite frozen food and french fries menus give us so much energy and motivation for the 5-hour afternoon coding marathon. However, no one actually knows how many potatoes they have exterminated throughout the week. We have a genius webpage created by some <a href="https://gibtesheuteschnitzel.de/">Schnitzel lover</a>. Personally, I like its minimalistic layout and determination on Schnitzel searching. </p><blockquote><p>However, we want more.</p></blockquote><p>It‚Äôs not just Schnitzel; we want to know everything about their menu. We want to know what‚Äôs inside the mensa ladies‚Äô brains when they design next week‚Äôs menu.</p><blockquote><p>The desire never ends. We need more data, more details, more, More, <strong>MORE!</strong></p></blockquote><h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>MensaarLecker is a statistic that collects all the menus‚Äô occurrences and provides daily menu information. It contains:</p><ul><li>A web scraper that collects the <a href="https://mensaar.de/#/menu/sb">daily menu</a> of the Mensa in Saarland University. </li><li>A statistic that calculates each item‚Äôs (main dish &amp; side dish) occurrence and percentage.</li></ul><h2 id="Developing-Process"><a href="#Developing-Process" class="headerlink" title="Developing Process"></a>Developing Process</h2><h3 id="Beautiful-Soup"><a href="#Beautiful-Soup" class="headerlink" title="Beautiful Soup"></a><a href="https://www.crummy.com/software/BeautifulSoup/bs4/doc/">Beautiful Soup</a></h3><p>I started my journey with Beautiful Soup, one of the most popular Python web scraper packages. However, as a Uni that is well-known for its computer science program, all the menus are rendered using JavaScript. And beautiful can only scrape HTML and XML tags. So the scraper can only see an empty skeleton page:</p><p><img src="/images/mensaar_empty.png"></p><h3 id="Selenium"><a href="#Selenium" class="headerlink" title="Selenium"></a><a href="https://selenium-python.readthedocs.io/">Selenium</a></h3><p>Basically, Selenium is a <a href="https://www.selenium.dev/documentation/webdriver/">Webdriver</a> that opens a browser naturally, like a human user. Then from there we can scrape the rendered information. Things get simpler once we can see the website as we see it on the browser. We just need to find the tag that contains the information we need and save it for storage.</p><h3 id="Scraping"><a href="#Scraping" class="headerlink" title="Scraping"></a>Scraping</h3><table><thead><tr><th align="left">data we need</th><th align="left">tag</th></tr></thead><tbody><tr><td align="left">menus</td><td align="left"><code>&lt;div class=&quot;counter&quot;&gt;</code></td></tr><tr><td align="left">date</td><td align="left"><code>&lt;div class=&quot;cursor-pointer active list-group-item&quot;&gt;</code></td></tr><tr><td align="left">main dish</td><td align="left"><code>&lt;span class=&quot;meal-title&quot;&gt;</code></td></tr><tr><td align="left">side dish</td><td align="left"><code>&lt;div class=&quot;component&quot;&gt;</code></td></tr></tbody></table><p>The first part of the task is to get the daily menu. We also get the date on the website to make the following work easier.</p><p>By the <code>find_element</code> and <code>find_elements</code> functions in Selenium, we can create a simple scraper like this:</p><pre><code class="python">from selenium import webdriverfrom selenium.webdriver.common.keys import Keysfrom selenium.webdriver.common.by import Bydriver = webdriver.Firefox()driver.get(&quot;https://mensaar.de/#/menu/sb&quot;)counters = driver.find_elements(By.CLASS_NAME, &quot;counter&quot;)for counter in counters:    meal_title = meal.find_element(By.CLASS_NAME, &quot;meal-title&quot;).text.strip()</code></pre><p>However, on the webpage there is also a counter called <code>Wahlessen.</code> Which refers to a more pricy and unpredictable menu, and we want to exclude its data:</p><pre><code class="python">counter_title = counter.find_element(By.CLASS_NAME, &quot;counter-title&quot;).text.strip()# Filter for specified counter titlesif counter_title in [&quot;Men√º 1&quot;, &quot;Men√º 2&quot;, &quot;Mensacaf√©&quot;]:    meal_title = meal.find_element(By.CLASS_NAME, &quot;meal-title&quot;).text.strip()</code></pre><h3 id="Storage"><a href="#Storage" class="headerlink" title="Storage"></a>Storage</h3><p>It is kinda pointless to make a full database for these small piece of data <em>(I may take my word back in the future)</em>, so we just store the collected data in Json files.<br>Therefore, everyday we will have a separate Json file. We create a separate Json file for statistics, it is calculated simply by adding current date‚Äôs data into the file, so it will accumlate each data entry.</p><pre><code class="python">with open(output_file, &quot;w&quot;, encoding=&quot;utf-8&quot;) as f:    json.dump(result, f, ensure_ascii=False, indent=2)print(f&quot;Results saved to &#123;output_file&#125;&quot;)# Save the updated occurrence counts to the JSON filecount_result = &#123;    &quot;meal_counts&quot;: dict(meal_count),    &quot;component_counts&quot;: dict(component_count)&#125;with open(count_file, &quot;w&quot;, encoding=&quot;utf-8&quot;) as f:    json.dump(count_result, f, ensure_ascii=False, indent=2)print(f&quot;Counts saved to &#123;count_file&#125;&quot;)</code></pre><pre><code class="json">&#123;  &quot;meal_counts&quot;: &#123;    &quot;KlimaTeller: Broccoli und Cheese Nuggets mit Chili-Kr√§uterdip&quot;: 1,    &quot;H√§hnchenschnitzel ‚ÄûWiener Art‚Äú mit Paprikarahmso√üe&quot;: 1,    &quot;Flammkuchen mit Tomaten und Rucola&quot;: 1,    &quot;K√∂ttbullar und Rahmso√üe mit Champignons&quot;: 1,    &quot;KlimaTeller: T√ºrkische Pizza Lahmacun&quot;: 1,    &quot;KlimaTeller: Hausgemachte vegetarische Kartoffelsuppe&quot;: 1,    &quot;Pasta mit Argentinischer Hackfleischso√üe&quot;: 1,  &#125;,  &quot;component_counts&quot;: &#123;    &quot;Pommes Frites&quot;: 1,    &quot;Karottensalat&quot;: 2,    &quot;Reis (aus biologischem Anbau)&quot;: 2,    &quot;Wei√üe Salatso√üe Dressing&quot;: 6,    &quot;Obst (Apfel aus biologischem Anbau)&quot;: 6,    &quot;Br√∂tchen&quot;: 4,    &quot;Wiener W√ºrstchen&quot;: 1  &#125;&#125;</code></pre><h3 id="Automation"><a href="#Automation" class="headerlink" title="Automation"></a>Automation</h3><blockquote><p>The part that gives me headache‚Ä¶</p></blockquote><p>I tried to use <a href="https://docs.github.com/en/actions/writing-workflows">GitHub Workflow</a> to run the Python script daily, but it didn‚Äôt work out‚Ä¶ So for my next step, I may create automation locally and connect the folder to the repository through GitHub Desktop.</p><p>Another solution maybe transfer the Json storage into standard database like <a href="https://www.mongodb.com/">MongoDB</a>.</p>]]></content>
      
      
      <categories>
          
          <category> Projects </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Scraper </tag>
            
            <tag> Selenium </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>3-hexo Shortcut</title>
      <link href="/3_hexo_Shortcut/"/>
      <url>/3_hexo_Shortcut/</url>
      
        <content type="html"><![CDATA[<p>Below is the list of shortcuts by for readers from the 3-hexo theme. </p><h2 id="Details"><a href="#Details" class="headerlink" title="Details"></a>Details</h2><h3 id="Global-Shortcut"><a href="#Global-Shortcut" class="headerlink" title="Global Shortcut"></a>Global Shortcut</h3><table><thead><tr><th align="left">Key</th><th align="left">Description</th></tr></thead><tbody><tr><td align="left">s</td><td align="left">show &#x2F; hide sidebar</td></tr><tr><td align="left">w</td><td align="left">show &#x2F; hide post‚Äôs table of content</td></tr><tr><td align="left">i</td><td align="left">focus on search boxes</td></tr><tr><td align="left">j</td><td align="left">scroll down</td></tr><tr><td align="left">k</td><td align="left">scroll up</td></tr><tr><td align="left">g</td><td align="left">page up</td></tr><tr><td align="left">shift+g</td><td align="left">page down</td></tr></tbody></table><h3 id="Search-Box"><a href="#Search-Box" class="headerlink" title="Search Box"></a>Search Box</h3><table><thead><tr><th align="left">Key</th><th align="left">Description</th></tr></thead><tbody><tr><td align="left">esc</td><td align="left">1. If there is input in the search box, it will be cleared </br> 2. if not, remove its focus</td></tr><tr><td align="left">down</td><td align="left">scroll downward</td></tr><tr><td align="left">up</td><td align="left">scroll upward</td></tr><tr><td align="left">enter</td><td align="left">redirect to selected post (default: first search result)</td></tr></tbody></table><p>More info: <a href="https://yelog.org/2017/03/24/3-hexo-shortcuts/">3-hexo shortcut by yelog</a></p>]]></content>
      
      
      <categories>
          
          <category> Site Note </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> 3-hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
